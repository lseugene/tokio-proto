var searchIndex = {};
searchIndex["tokio_proto"] = {"doc":"A collection of components for rapid protocol development","items":[[3,"Framed","tokio_proto","FramedIo handling frame encoding and decoding.",null,null],[4,"Error","","Error returned as an Error frame or an `io::Error` that occurerred during\nnormal processing of the Transport",null,null],[13,"Transport","","Transport frame level error",0,null],[13,"Io","","I/O level error",0,null],[4,"Message","","Message sent and received from a multiplexed service",null,null],[13,"WithoutBody","","Has no associated streaming body",1,null],[13,"WithBody","","Has associated streaming body",1,null],[0,"client","","Utilities for building protocol clients",null,null],[3,"Client","tokio_proto::client","Client `Service` for pipeline or multiplex protocols",null,null],[5,"pair","","Return a client handle and a handle used to receive requests on",null,{"inputs":[],"output":{"name":"pair"}}],[6,"Pair","","A client / receiver pair",null,null],[6,"Receiver","","Receive requests submitted to the client",null,null],[11,"call","","",2,null],[11,"poll_ready","","",2,null],[0,"multiplex","tokio_proto","Dispatch for multiplexed protocols",null,null],[3,"Multiplex","tokio_proto::multiplex","Task that drives multiplexed protocols",null,null],[3,"Server","","A server `Task` that dispatches `Transport` messages to a `Service` using\nprotocol multiplexing.",null,null],[4,"Frame","","A multiplexed protocol frame",null,null],[13,"Message","","Either a request or a response",3,null],[13,"MessageWithBody","","Returned by `Transport::read` when a streaming body will follow.\nSubsequent body frames with a matching `RequestId` will be proxied to\nthe provided `Sender`.",3,null],[13,"Body","","Body frame. None indicates that the body is done streaming.",3,null],[13,"Error","","Error",3,null],[13,"Done","","Final frame sent in each transport direction",3,null],[5,"connect","","Connect to the given `addr` and handle using the given Transport and protocol pipelining.",null,{"inputs":[{"name":"t"},{"name":"handle"}],"output":{"name":"client"}}],[11,"new","","Create a new pipeline `Multiplex` dispatcher with the given service and\ntransport",4,{"inputs":[{"name":"s"},{"name":"t"}],"output":{"name":"multiplex"}}],[11,"poll","","",4,null],[11,"new","","Create a new pipeline `Server` dispatcher with the given service and\ntransport",5,{"inputs":[{"name":"s"},{"name":"t"}],"output":{"name":"server"}}],[11,"poll","","",5,null],[6,"RequestId","","Identifies a request / response thread",null,null],[8,"Dispatch","","Dispatch messages from the transport to the service",null,null],[16,"InMsg","","Message written to transport",6,null],[16,"InBody","","Body written to transport",6,null],[16,"InBodyStream","","Body stream written to transport",6,null],[16,"OutMsg","","Message read from the transprort",6,null],[16,"Error","","Error",6,null],[10,"dispatch","","Process an out message",6,null],[10,"poll","","Poll the next completed message",6,null],[10,"is_ready","","The `Dispatch` is ready to accept another message",6,null],[10,"has_in_flight","","RPC currently in flight",6,null],[8,"ServerService","","A specialization of `Service` supporting the requirements of server\npipelined services",null,null],[16,"Request","","Requests handled by the service.",7,null],[16,"Response","","Responses given by the service.",7,null],[16,"Body","","Response body chunk",7,null],[16,"BodyStream","","Response body stream",7,null],[16,"Error","","Errors produced by the service.",7,null],[16,"Future","","The future response value.",7,null],[10,"call","","Process the request and return the response asynchronously.",7,null],[8,"Transport","","A specialization of `io::Transport` supporting the requirements of\npipeline based protocols.",null,null],[16,"In","","Messages written to the transport",8,null],[16,"BodyIn","","Inbound body frame",8,null],[16,"Out","","Messages read from the transport",8,null],[16,"BodyOut","","Outbound body frame",8,null],[16,"Error","","Transport error",8,null],[10,"poll_read","","Tests to see if this Transport may be readable.",8,null],[10,"read","","Read a message from the `Transport`",8,null],[10,"poll_write","","Tests to see if this I/O object may be writable.",8,null],[10,"write","","Write a message to the `Transport`",8,null],[10,"flush","","Flush pending writes to the socket",8,null],[8,"NewTransport","","A specialization of `io::NewTransport` supporting the requirements of\npipeline based protocols.",null,null],[16,"In","","Messages written to the transport",9,null],[16,"BodyIn","","Inbound streaming body",9,null],[16,"Out","","Messages read from the transport",9,null],[16,"BodyOut","","Outbound streaming body",9,null],[16,"Error","","Errors",9,null],[16,"Item","","Transport returned",9,null],[16,"Future","","The Future transport",9,null],[10,"new_transport","","Create and return a new `Transport`",9,null],[11,"request_id","","Return the request ID associated with the frame.",3,null],[11,"unwrap_msg","","Unwraps a frame, yielding the content of the `Message`.",3,null],[11,"unwrap_body","","Unwraps a frame, yielding the content of the `Body`.",3,null],[11,"unwrap_err","","Unwraps a frame, yielding the content of the `Error`.",3,null],[11,"is_done","","Returns true if the frame is `Frame::Done`",3,null],[11,"fmt","","",3,null],[0,"pipeline","tokio_proto","A dispatcher for pipelining protocols",null,null],[3,"Server","tokio_proto::pipeline","A server `Task` that dispatches `Transport` messages to a `Service` using\nprotocol pipelining.",null,null],[4,"Frame","","A pipelined protocol frame",null,null],[13,"Message","","Either a request or a response",10,null],[13,"MessageWithBody","","Returned by `Transport::read` when a streaming body will follow.\nSubsequent body frames will be proxied to the provided `Sender`.",10,null],[13,"Body","","Body frame. None indicates that the body is done streaming.",10,null],[13,"Error","","Error",10,null],[13,"Done","","Final frame sent in each transport direction",10,null],[5,"connect","","Connect to the given `addr` and handle using the given Transport and protocol pipelining.",null,{"inputs":[{"name":"t"},{"name":"handle"}],"output":{"name":"client"}}],[11,"new","","Create a new pipeline `Server` dispatcher with the given service and\ntransport",11,{"inputs":[{"name":"s"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll","","",11,null],[8,"ServerService","","A specialization of `Service` supporting the requirements of server\npipelined services",null,null],[16,"Request","","Requests handled by the service.",12,null],[16,"Response","","Responses given by the service.",12,null],[16,"Body","","Response body chunk",12,null],[16,"BodyStream","","Response body stream",12,null],[16,"Error","","Errors produced by the service.",12,null],[16,"Future","","The future response value.",12,null],[10,"call","","Process the request and return the response asynchronously.",12,null],[8,"Transport","","A specialization of `io::Transport` supporting the requirements of\npipeline based protocols.",null,null],[16,"In","","Messages written to the transport",13,null],[16,"BodyIn","","Inbound body frame",13,null],[16,"Out","","Messages read from the transport",13,null],[16,"BodyOut","","Outbound body frame",13,null],[16,"Error","","Transport error",13,null],[10,"poll_read","","Tests to see if this Transport may be readable.",13,null],[10,"read","","Read a message from the `Transport`",13,null],[10,"poll_write","","Tests to see if this I/O object may be writable.",13,null],[10,"write","","Write a message to the `Transport`",13,null],[10,"flush","","Flush pending writes to the socket",13,null],[8,"NewTransport","","A specialization of `io::NewTransport` supporting the requirements of\npipeline based protocols.",null,null],[16,"In","","Messages written to the transport",14,null],[16,"BodyIn","","Inbound streaming body",14,null],[16,"Out","","Messages read from the transport",14,null],[16,"BodyOut","","Outbound streaming body",14,null],[16,"Error","","Errors",14,null],[16,"Item","","Transport returned",14,null],[16,"Future","","The Future transport",14,null],[10,"new_transport","","Create and return a new `Transport`",14,null],[11,"unwrap_msg","","Unwraps a frame, yielding the content of the `Message`.",10,null],[11,"unwrap_body","","Unwraps a frame, yielding the content of the `Body`.",10,null],[11,"unwrap_err","","Unwraps a frame, yielding the content of the `Error`.",10,null],[11,"is_done","","Returns true if the frame is `Frame::Done`",10,null],[11,"fmt","","",10,null],[0,"server","tokio_proto","A generic Tokio TCP server implementation.",null,null],[3,"ServerHandle","tokio_proto::server","A handle to a running server.",null,null],[5,"listen","","Spawn a new `Task` that binds to the given `addr` then accepts all incoming\nconnections; dispatching them to tasks created by `new_task`.",null,{"inputs":[{"name":"handle"},{"name":"socketaddr"},{"name":"t"}],"output":{"name":"result"}}],[8,"NewTask","","Create a new `Task` to handle a server socket.",null,null],[16,"Item","","The `Task` value created by this factory",15,null],[10,"new_task","","Create and return a new `Task` value",15,null],[11,"local_addr","","Returns the local socket address of the `TcpListener` for this server.",16,null],[11,"fmt","tokio_proto","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"new","","Create a new `Framed`",17,{"inputs":[{"name":"t"},{"name":"p"},{"name":"s"},{"name":"blockbuf"},{"name":"blockbuf"}],"output":{"name":"framed"}}],[11,"poll_read","","",17,null],[11,"read","","",17,null],[11,"poll_write","","",17,null],[11,"write","","",17,null],[11,"flush","","",17,null],[11,"get_ref","","Returns a reference to the inner value",1,null],[11,"get_mut","","Returns a mutable reference to the inner value",1,null],[11,"into_inner","","Consumes the value and returns the inner value",1,null],[11,"take_body","","If the `Message` value has an associated body stream, return it. The\noriginal `Message` value will then become a `WithoutBody` variant.",1,null],[11,"eq","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"fmt","","",1,null],[8,"Parse","","Parses frames out of a `BlockBuf`",null,null],[16,"Out","","Parse result",18,null],[10,"parse","","Optionally parse a frame from the given buffer.",18,null],[11,"done","","Called when there are no more inbound bytes",18,null],[8,"Serialize","","Serialize frames into a `BlockBuf`",null,null],[16,"In","","Type to serialize",19,null],[10,"serialize","","Serialize the frame into the `BlockBuf`",19,null],[8,"TryRead","","A refinement of `std::io::Read` for reading from non-blocking sources.",null,null],[10,"try_read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",20,null],[10,"try_read_buf","","Pull some bytes from this source into the specified `Buf`, returning\nhow many bytes were read.",20,null],[8,"TryWrite","","A refinement of `std::io::Write` for reading from non-blocking sources.",null,null],[10,"try_write","","Write a buffer into this object, returning how many bytes were written.",21,null],[10,"try_write_buf","","Write a `Buf` into this object, returning how many bytes were written.",21,null],[10,"try_flush","","Try flushing the underlying IO",21,null],[11,"done","","Called when there are no more inbound bytes",18,null]],"paths":[[4,"Error"],[4,"Message"],[3,"Client"],[4,"Frame"],[3,"Multiplex"],[3,"Server"],[8,"Dispatch"],[8,"ServerService"],[8,"Transport"],[8,"NewTransport"],[4,"Frame"],[3,"Server"],[8,"ServerService"],[8,"Transport"],[8,"NewTransport"],[8,"NewTask"],[3,"ServerHandle"],[3,"Framed"],[8,"Parse"],[8,"Serialize"],[8,"TryRead"],[8,"TryWrite"]]};
initSearch(searchIndex);
